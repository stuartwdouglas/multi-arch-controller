apiVersion: tekton.dev/v1
kind: TaskRun
metadata:
  generateName: sudo-test-
  namespace: test-jvm-namespace
spec:
  params:
    - name: PLATFORM
      value: linux-root/amd64
    - name: OUTPUT_IMAGE
      value: quay.io/sdouglas/artifacts
  serviceAccountName: pipeline
  timeout: 1h0m0s
  taskSpec:
    params:
      - description: The platform to build on
        name: PLATFORM
        type: string
      - name: ORAS_IMAGE
        type: string
        default: quay.io/redhat-user-workloads/rhtap-integration-tenant/oras-container/oras-container:6aa1a14a41944448e9250853b45f11e91e714afe
      - name: OUTPUT_IMAGE
        type: string
    stepTemplate:
      env:
        - name: ORAS_IMAGE
          value: $(params.ORAS_IMAGE)
        - name: OUTPUT_IMAGE
          value: $(params.OUTPUT_IMAGE)
    steps:
      - image: quay.io/redhat-appstudio/multi-platform-runner:01c7670e81d5120347cf0ad13372742489985e5f@sha256:246adeaaba600e207131d63a7f706cffdcdc37d8f600c56187123ec62823ff44
        name: build
        computeResources:
          limits:
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 128Mi
        script: |-
          set -o verbose
          set -eu
          mkdir -p ~/.ssh
          if [ -e "/ssh/error" ]; then
            #no server could be provisioned
            cat /ssh/error
            exit 1
          elif [ -e "/ssh/otp" ]; then
           curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server) >~/.ssh/id_rsa
           echo "" >> ~/.ssh/id_rsa
          else
            cp /ssh/id_rsa ~/.ssh
          fi
          chmod 0400 ~/.ssh/id_rsa
          export SSH_HOST=$(cat /ssh/host)
          export BUILD_DIR=$(cat /ssh/user-dir)
          export SSH_ARGS="-o StrictHostKeyChecking=no"
          mkdir -p scripts
          echo "$BUILD_DIR"
          ssh $SSH_ARGS "$SSH_HOST"  mkdir -p "$BUILD_DIR/workspaces" "$BUILD_DIR/scripts" "$BUILD_DIR/tmp"
          
          #copied from konflux-ci/build-trusted-artifacts, as oras is funny about auth
          cat >fix-auth.sh <<'EOF'
          original_ref="$1"
          
          # Remove digest from image reference
          ref="${original_ref/@*}"
          
          # Remove tag from image reference while making sure optional registry port is taken into account
          ref="$(echo -n $ref | sed 's_/\(.*\):\(.*\)_/\1_g')"
          
          registry="${ref/\/*}"
          
          while true; do
          token=$(< ~/.docker/config.json jq -c '.auths["'$ref'"]')
          if [[ "$token" != "null" ]]; then
              >&2 echo "Using token for $ref"
              echo -n '{"auths": {"'$registry'": '$token'}}' | jq -c .
                  exit 0
              fi
          
              if [[ "$ref" != *"/"* ]]; then
                  break
              fi
          
              ref="${ref%*/*}"
          done
          
          >&2 echo "Token not found for $original_ref"
          
          echo -n '{"auths": {}}'
          EOF
          chmod +x fix-auth.sh
          ./fix-auth.sh quay.io/sdouglas/artifacts:test2 >$HOME/.docker/oras.json
          rsync -ra "$HOME/.docker/" "$SSH_HOST:$BUILD_DIR/.docker/"
          
          #we now have an auth file on the vm that will work for oras, we don't override the default so podman still has the full file
          
          #this heredoc allows expansions for the image name
          cat >scripts/script-build.sh <<REMOTESSHEOF
          #!/bin/sh
          export ORAS_IMAGE="$ORAS_IMAGE"
          export BUILD_DIR="$BUILD_DIR"
          export OUTPUT_IMAGE="$OUTPUT_IMAGE"
          REMOTESSHEOF
          
          #no expansions in this one, the env vars are evaluated on the remote vm
          cat >>scripts/script-build.sh <<'REMOTESSHEOF'
          echo >config.toml <<EOF
          [[blueprint.customizations.user]]
          name = "user"
          password = "pass"
          groups = ["wheel"]
          EOF
          mkdir output
          
          echo "PULLING IMAGE"
          sudo podman pull quay.io/centos-bootc/centos-bootc:stream9
          echo "RUNNING BUILD"
          sh -c 'sudo podman run --rm -it --privileged --pull=newer --security-opt label=type:unconfined_t -v $(pwd)/config.toml:/config.toml -v $(pwd)/output:/output -v /var/lib/containers/storage:/var/lib/containers/storage quay.io/centos-bootc/bootc-image-builder:latest --type raw --local quay.io/centos-bootc/centos-bootc:stream9' || true
          
          echo "PUSHING OCI ARTIFACT"
          podman run --user 0 -v $BUILD_DIR/output:/home/oras/output:Z -v $HOME/.docker:/home/oras/.docker:Z "$ORAS_IMAGE" push --registry-config /home/oras/.docker/oras.json -v "$OUTPUT_IMAGE" output/qcow2/disk.qcow2:application/vnd.containers.bootc.v1.diskimage+qcow2 output/image/disk.raw:application/vnd.containers.bootc.v1.diskimage+raw
          REMOTESSHEOF
          
          ssh $SSH_ARGS "$SSH_HOST" "bash -s" <scripts/script-build.sh
        volumeMounts:
          - mountPath: /ssh
            name: ssh
            readOnly: true
    volumes:
      - name: ssh
        secret:
          optional: false
          secretName: multi-platform-ssh-$(context.taskRun.name)
